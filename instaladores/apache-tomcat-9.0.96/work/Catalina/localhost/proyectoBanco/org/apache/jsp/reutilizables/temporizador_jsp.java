/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.96
 * Generated at: 2025-10-07 05:35:39 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.reutilizables;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class temporizador_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("\n");
      out.write("<!-- ================================\n");
      out.write("     TEMPORIZADOR DE INACTIVIDAD (JSP)\n");
      out.write("     Descripción:\n");
      out.write("     Este componente controla el tiempo de inactividad del usuario.\n");
      out.write("     Si el usuario no realiza ninguna acción (clic, movimiento, scroll, etc.)\n");
      out.write("     durante 60 segundos, el sistema redirige automáticamente a login.jsp.\n");
      out.write("     Incluye un contador visible con estilo acorde al diseño general (rojo sangre + dorado).\n");
      out.write("================================ -->\n");
      out.write("\n");
      out.write("<style>\n");
      out.write("    /* ======== ESTILO DEL CONTENEDOR DEL TEMPORIZADOR ======== */\n");
      out.write("    .timer-container {\n");
      out.write("        position: fixed;\n");
      out.write("        bottom: 20px;                    /* Posición en la esquina inferior derecha */\n");
      out.write("        right: 20px;\n");
      out.write("        background: linear-gradient(135deg, #8B0000, #B22222); /* Degradado rojo sangre */\n");
      out.write("        color: #fff;\n");
      out.write("        border: 2px solid #ffc107;       /* Borde dorado */\n");
      out.write("        border-radius: 12px;\n");
      out.write("        box-shadow: 0 0 10px rgba(178, 34, 34, 0.6);\n");
      out.write("        padding: 12px 20px;\n");
      out.write("        text-align: center;\n");
      out.write("        font-family: 'Segoe UI', sans-serif;\n");
      out.write("        z-index: 1000;                   /* Asegura que quede encima del contenido */\n");
      out.write("        transition: all 0.3s ease-in-out;\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    /* Efecto visual al pasar el mouse sobre el temporizador */\n");
      out.write("    .timer-container:hover {\n");
      out.write("        transform: translateY(-3px);\n");
      out.write("        box-shadow: 0 0 14px rgba(255, 193, 7, 0.8);\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    /* Estilo del número del temporizador (minutos:segundos) */\n");
      out.write("    .timer {\n");
      out.write("        font-size: 1.6rem;\n");
      out.write("        font-weight: 700;\n");
      out.write("        letter-spacing: 1px;\n");
      out.write("        color: #fff;\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    /* Texto descriptivo debajo del contador */\n");
      out.write("    .timer-label {\n");
      out.write("        font-size: 0.9rem;\n");
      out.write("        color: #ffeeba; /* Dorado claro */\n");
      out.write("        margin-top: 4px;\n");
      out.write("        letter-spacing: 0.5px;\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    /* Cambio de color cuando el tiempo está por agotarse */\n");
      out.write("    .timer.warning {\n");
      out.write("        color: #ffb3b3;\n");
      out.write("        text-shadow: 0 0 8px rgba(255, 50, 50, 0.7);\n");
      out.write("    }\n");
      out.write("</style>\n");
      out.write("\n");
      out.write("<!-- Contenedor visible del temporizador -->\n");
      out.write("<div class=\"timer-container\">\n");
      out.write("    <div class=\"timer\" id=\"timer\">05:00</div>\n");
      out.write("    <div class=\"timer-label\">Tiempo de inactividad</div>\n");
      out.write("</div>\n");
      out.write("\n");
      out.write("<script>\n");
      out.write("    /* =========================================\n");
      out.write("       LÓGICA DEL TEMPORIZADOR DE INACTIVIDAD\n");
      out.write("       ========================================= */\n");
      out.write("\n");
      out.write("    let inactivityTime = 300; // 5 minutos\n");
      out.write("    let timer;\n");
      out.write("\n");
      out.write("    function resetTimer() {\n");
      out.write("        clearTimeout(timer);\n");
      out.write("        inactivityTime = 300;\n");
      out.write("        updateTimerDisplay();\n");
      out.write("        startTimer();\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    function startTimer() {\n");
      out.write("        timer = setTimeout(function() {\n");
      out.write("            if (inactivityTime > 0) {\n");
      out.write("                inactivityTime--;\n");
      out.write("                updateTimerDisplay();\n");
      out.write("                startTimer();\n");
      out.write("            } else {\n");
      out.write("                window.location.href = 'login.jsp'; // 🔸 Redirección tras inactividad\n");
      out.write("            }\n");
      out.write("        }, 1000);\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    function updateTimerDisplay() {\n");
      out.write("        const minutes = Math.floor(inactivityTime / 60);\n");
      out.write("        const seconds = inactivityTime % 60;\n");
      out.write("        const timerElement = document.getElementById('timer');\n");
      out.write("\n");
      out.write("        timerElement.textContent =\n");
      out.write("            (minutes < 10 ? '0' + minutes : minutes) + ':' +\n");
      out.write("            (seconds < 10 ? '0' + seconds : seconds);\n");
      out.write("\n");
      out.write("        if (inactivityTime <= 10) {\n");
      out.write("            timerElement.classList.add('warning');\n");
      out.write("        } else {\n");
      out.write("            timerElement.classList.remove('warning');\n");
      out.write("        }\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    // Escucha actividad en la ventana principal\n");
      out.write("    const events = ['mousedown', 'mousemove', 'keypress', 'scroll', 'touchstart'];\n");
      out.write("    events.forEach(function(name) {\n");
      out.write("        document.addEventListener(name, resetTimer, true);\n");
      out.write("    });\n");
      out.write("\n");
      out.write("    // 🔹 También escucha actividad enviada desde el iframe\n");
      out.write("    window.addEventListener(\"message\", function(event) {\n");
      out.write("        if (event.data === \"user-active\") {\n");
      out.write("            resetTimer();\n");
      out.write("        }\n");
      out.write("    });\n");
      out.write("\n");
      out.write("    resetTimer();\n");
      out.write("</script>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
